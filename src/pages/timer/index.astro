---
import Layout from "../../layouts/Layout.astro";
export const prerender = false;
---

<Layout title="Timer">
  <main id="main" class="h-screen w-screen hidden bg-slate-100 flex-col gap-4 items-center justify-center">
    <div id="errorDisplay" class="hidden">
      <h1 class="text-center text-4xl font-semibold">Oops! It seems that the timer you are looking for does not exist.</h1>
      <a href="/"><button class="mx-auto mt-10 block bg-slate-400 px-4 font-bold rounded-sm py-2 hover:bg-slate-500">Back to Home</button></a>
  </div>
    <h3 id="eventDirection" class="text-4xl font-semibold text-center"></h3>
    <div
      id="countdown"
      class="w-screen h-fit flex text-center text-5xl md:text-9xl items-center justify-center space-x-2 md:space-x-6 select-none"
    >
      <div class="flex flex-col gap-2">
        <span id="days">0</span>
        <span class="text-xs md:text-base">Days</span>
      </div>
      <span class="-translate-y-5 md:-translate-y-6">:</span>
      <div class="flex flex-col gap-2">
        <span id="hours">0</span>
        <span class="text-xs md:text-base">Hours</span>
      </div>
      <span class="-translate-y-5 md:-translate-y-6">:</span>
      <div class="flex flex-col gap-2">
        <span id="minutes">0</span>
        <span class="text-xs md:text-base">Minutes</span>
      </div>
      <span class="-translate-y-5 md:-translate-y-6">:</span>
      <div class="flex flex-col gap-2">
        <span id="seconds">0</span>
        <span class="text-xs md:text-base">Seconds</span>
      </div>
    </div>
    <div id="sender">
      <h1 class="text-xl font-bold text-center">Sender's Time</h1>
      <h2 id="senderTimezone"></h2>
    </div>
    <div id="user">
      <h1 class="text-xl font-bold text-center">Your Time</h1>
      <h2 id="userTimezone"></h2>
    </div>
    <div class="flex gap-1">
      <add-to-calendar-button id="add-to-calendar" lightMode="dark" options="'Apple', 'Google', 'iCal', 'Microsoft365', 'MicrosoftTeams', 'Outlook.com', 'Yahoo'"/>
      <button type="button" id="copy-button" class="bg-stone-800 px-4 w-24 font-bold m-[2.08px] border shadow-2xl border-neutral-700 drop-shadow-2xl rounded-md text-center text-white transition-all duration-300 hover:bg-neutral-900 data-[status=clicked]:bg-neutral-900 " data-status="idle">Share</button>
    </div>
  </main>
</Layout>

<script>
  // Import copy-to-clipboard script
  import "./copy-to-clipboard.ts";

  // Lazy load add-to-calendar-button
  const observer = new IntersectionObserver((entries) => {
  for (const entry of entries) {
    if (!entry.isIntersecting) continue;
    observer.disconnect();
    import('@node_modules/add-to-calendar-button/dist/module/index.js');
  }
  });
  const instances = document.querySelectorAll('add-to-calendar-button');
  for (const instance of instances) observer.observe(instance);

  const params = new URLSearchParams(window.location.search);
  const time = params.get("value");

  function formatNumber(number: number): string {
    return number < 10 ? "0" + number : number.toString();
  }

  function updateCountdown(eventDate: Date) {
    const now = new Date();
    let timeDifference = eventDate.getTime() - now.getTime();

    const eventDirectionElement = document.getElementById(
      "eventDirection"
    ) as HTMLHeadingElement;

    if (timeDifference < 0) {
      eventDirectionElement.textContent = "Time Since Event:";
      timeDifference = -timeDifference; // Convert to positive for calculation
    } else {
      eventDirectionElement.textContent = "Time to Event:";
    }

    const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
      (timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor(
      (timeDifference % (1000 * 60 * 60)) / (1000 * 60)
    );
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

    const daysElement = document.getElementById("days") as HTMLSpanElement;
    const hoursElement = document.getElementById("hours") as HTMLSpanElement;
    const minutesElement = document.getElementById(
      "minutes"
    ) as HTMLSpanElement;
    const secondsElement = document.getElementById(
      "seconds"
    ) as HTMLSpanElement;

    daysElement.textContent = formatNumber(days);
    hoursElement.textContent = formatNumber(hours);
    minutesElement.textContent = formatNumber(minutes);
    secondsElement.textContent = formatNumber(seconds);
  }

  fetch(`/timer/get.json?value=${time}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  })
    .then((res) => res.json())
    .then((res: { datetime: string; timezone: string }) => {
      const { datetime, timezone: senderTimezone } = res;

      // Initial countdown update
      const eventDate = new Date(datetime);
      updateCountdown(eventDate);

      // Update sender timezone and time
      const senderTimezoneElement = document.getElementById(
        "senderTimezone"
      ) as HTMLHeadingElement;
      const senderTimeFormatted = new Intl.DateTimeFormat('en-US', {
        timeZone: senderTimezone,
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit'
      }).format(eventDate);
      senderTimezoneElement.textContent = `${senderTimeFormatted}, ${senderTimezone}`;

      // Update user timezone and time
      const userTimezoneElement = document.getElementById(
        "userTimezone"
      ) as HTMLHeadingElement;
      const userTimeFormatted = new Intl.DateTimeFormat('en-US', {
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit'
      }).format(eventDate);
      userTimezoneElement.textContent = `${userTimeFormatted}, ${Intl.DateTimeFormat().resolvedOptions().timeZone}`;

      // Set attributes on the add-to-calendar button
      const addToCalendarButton = document.getElementById("add-to-calendar");
      if (addToCalendarButton) {
        addToCalendarButton.setAttribute("name", "Sync up");
        addToCalendarButton.setAttribute("startDate", eventDate.toLocaleDateString('en-CA', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit'
        }));
        addToCalendarButton.setAttribute("startTime", eventDate.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit", hour12: false}));
        addToCalendarButton.setAttribute("endTime", eventDate.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit", hour12: false}));
        addToCalendarButton.setAttribute("timeZone", senderTimezone);
      }

      // Unhide main element
      const mainElement = document.getElementById("main") as HTMLDivElement;
      mainElement.classList.remove("hidden");
      mainElement.classList.add("flex");

      // Update countdown every second
      setInterval(() => updateCountdown(eventDate), 1000);
    }).catch((err) => {
    console.error(err);

    const errorDisplay = document.getElementById('errorDisplay') as HTMLDivElement;
    const countdownDisplay = document.getElementById('countdown') as HTMLDivElement;
    const senderDisplay = document.getElementById('sender') as HTMLDivElement;
    const userDisplay = document.getElementById('user') as HTMLDivElement;
    const eventDirectionElement = document.getElementById(
      "eventDirection"
    ) as HTMLHeadingElement;
    const mainElement = document.getElementById("main") as HTMLDivElement;

    // Unhide main element      
    mainElement.classList.remove("hidden");
    mainElement.classList.add("flex");

    // Show error message
    errorDisplay.classList.remove('hidden');

    // Hide the other elements
    countdownDisplay.classList.add('hidden');
    senderDisplay.classList.add('hidden');
    userDisplay.classList.add('hidden');
    eventDirectionElement.classList.add('hidden');
});
</script>
